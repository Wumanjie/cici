/*怎样让main_activity.xml跟MainActivity.java关联起来,在MainActivity中敲入setContentView()*/
protected void onCreate(Bundle savedInstanceState){
   super.onCreate(savedInstanceState);
   setContentView(R.layout.main_activity);
   }


/*一些Tip
*wrap_content:长度宽度都是随控件改变 match_parent是指铺满父类容器，同fill_parent
*android:src="@drawable/ic_launcher"是imageView的内容图像
*android:background="@drawable/ic_launcher"是imageView背景图片
*background要设置高度 android:layout_height="Xsp"
/*button与ImageButton的区别,button有text的属性用于添加文本，ImageButton有的是src属性用于添加图片。相同点是都有background


//控件的监听事件(以按钮为例)，第一种方法是匿名内部类
public class MainActivity extends Acitivity{
  protected void OnCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
 
  //设置Button的监听器，通过监听器实现我们点击Button要操作的事
  loginButton=(Button)findViewById(R.id.button1);
  loginButton.setOnClickListener(new OnClickListener(){
  public void onClick(View arg0){
  System.out.println("我的Button被点击了")；}
  )}；}
  //第二种方法是外部方法
  public class MainActivity extends Activity{
    /*注意先定义*/
    private Button bt1;
  protected void OnCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  bt1=(Button)findViewById(R.id.button1);}
  //点击事件的外部类的写法
  bt1.setOnClickListener(new MyOnClickListener(){
  public void onClicl(View v){
   super.onClick(v);
   Toast.makeText(MainActivity.this,"bt1要执行的逻辑",1).show();}
   });
   }
   Class MyOnClickListener implements OnClickListener{
   public void onClick(View v){
   ...........}
//第三种方法是接口类
public class MainActivity extends Actvity implements OnClickListener{
 protected void OnCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  imgBt=(ImageButton)findViewById(R.id.imageButton1);
  imgBt.setOnClickListener(this);}
  OnClickListener listener=new OnClickListener(){
   public void onClick(View v){
   ...........................}
   };}
   
//AutoCompleteTextView 功能是输入前几个字后动态匹配热门信息，android:completionThreshold="2"即表示为输入两个字后就有热搜下拉榜。但输入只能是一个短语一句话。
/*在main_activity.xml*/
<AutoCompleteTextView
  android:id="@+id/autoCompleteTextView1"
  android:layout_width="match_parent"
  android:layout_height="wrap_content"
  android:hint="请输入要搜索的关键词">
  </AutoCompleteTextView>
  public class MainActivity extends Activity{
     private AutoCompleteTextView acTextView;
     //举个例子的初始化数据源
     private String[]res={"beijing1","beijing2","beijing3","shanghai1","shanghai2"};
     protected void onCreate(Bundle savedInstanceState){
       super.onCreate(savedInstanceState);
       setContentView(R.id.activity_main);
       //初始化控件,配一个适配器，在class中初始化数据源，将适配器与AutoCompleteTextView绑定
       acTextView=(AutoCompleteTextView)findViewById(R.id.AutoCompleteTextView1);
       ArrayAdapter<String>adapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,res);
       acTextView.setAdapter(adapter);
       }
       
 /*MultiAutoCompleteTextView支持多次输入，分别用分隔符分开（设置分隔符 mtxt.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer()); comma是逗号
 */并且在个值选中时再次输入会自动匹配。android:completionThreshold="X"为设置多少字符的时候自动匹配
 <MultiAutoCompleteTextView
  android:id="@+id/autoCompleteTextView1"
  android:layout_width="match_parent"
  android:layout_height="wrap_content"
  android:hint="请输入收信人邮箱/手机">
  </MultiAutoCompleteTextView>
  
 //在MainActivity.java中
 public class MainActivity extends Activity{
     private MultiAutoCompleteTextView macTextView;
     //举个例子的初始化数据源
     private String[]res={"beijing1","beijing2","beijing3","shanghai1","shanghai2"};
     protected void onCreate(Bundle savedInstanceState){
       super.onCreate(savedInstanceState);
       setContentView(R.id.activity_main);
       //初始化控件,配一个适配器，在class中初始化数据源，将适配器与AutoCompleteTextView绑定
       macTextView=(MultiAutoCompleteTextView)findViewById(R.id.MultiAutoCompleteTextView1);
       ArrayAdapter<String>adapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,res);
       macTextView.setAdapter(adapter);
       macTextView.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());}
       }
       
//ToggleButton 属性有：android:checked="true"(or false),android:textOff="关"，android:textOn="开"，开关的按键
//在activity_main.xml中
  <ToggleButton
     android:checked="false"
     android:textOn="开"
     android:textOff="关"
     android:id="@+id/toggleButton1"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
     />
     <ImageView
       android:id="@+id/imageView1"
       android:layout_width="match_parent"
       android:layout_height="match_parent"
       android:background="@drawable/off"
       />
       //在MainActivity.java中
       public class MainActivity extends Activity implements OnCheckedChangeListener {
         private ToggleButton tb;
         private ImageView img;
         protected void onCreate(Bundle savedInstanceState){
           super.onCreate(savedInstanceState);
           setContentView(R.layout.activity_main);
           tb=(ToggleButton)findViewById(R.id.toggleButton1);
           img=(ImageView)findViewById(R.id.imageView1);
           tb.setOnCheckedChangeListener(this);
           }
      public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
         img.setBackgroundResource(isChecked?R.drawable.on:R.drawable.off);}}
           
