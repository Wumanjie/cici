/*怎样让main_activity.xml跟MainActivity.java关联起来,在MainActivity中敲入setContentView()*/
protected void onCreate(Bundle savedInstanceState){
   super.onCreate(savedInstanceState);
   setContentView(R.layout.main_activity);
   }


/*一些Tip
*wrap_content:长度宽度都是随控件改变 match_parent是指铺满父类容器，同fill_parent
*android:src="@drawable/ic_launcher"是imageView的内容图像
*android:background="@drawable/ic_launcher"是imageView背景图片
*background要设置高度 android:layout_height="Xsp"
/*button与ImageButton的区别,button有text的属性用于添加文本，ImageButton有的是src属性用于添加图片。相同点是都有background


//控件的监听事件(以按钮为例)，第一种方法是匿名内部类
public class MainActivity extends Acitivity{
  protected void OnCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
 
  //设置Button的监听器，通过监听器实现我们点击Button要操作的事
  loginButton=(Button)findViewById(R.id.button1);
  loginButton.setOnClickListener(new OnClickListener(){
  public void onClick(View arg0){
  System.out.println("我的Button被点击了")；}
  )}；}
  //第二种方法是外部方法
  public class MainActivity extends Activity{
    /*注意先定义*/
    private Button bt1;
  protected void OnCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  bt1=(Button)findViewById(R.id.button1);}
  //点击事件的外部类的写法
  bt1.setOnClickListener(new MyOnClickListener(){
  public void onClicl(View v){
   super.onClick(v);
   Toast.makeText(MainActivity.this,"bt1要执行的逻辑",1).show();}
   });
   }
   Class MyOnClickListener implements OnClickListener{
   public void onClick(View v){
   ...........}
//第三种方法是接口类
public class MainActivity extends Actvity implements OnClickListener{
 protected void OnCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  imgBt=(ImageButton)findViewById(R.id.imageButton1);
  imgBt.setOnClickListener(this);}
  OnClickListener listener=new OnClickListener(){
   public void onClick(View v){
   ...........................}
   };}
   
//AutoCompleteTextView 功能是输入前几个字后动态匹配热门信息，android:completionThreshold="2"即表示为输入两个字后就有热搜下拉榜。但输入只能是一个短语一句话。
/*在main_activity.xml*/
<AutoCompleteTextView
  android:id="@+id/autoCompleteTextView1"
  android:layout_width="match_parent"
  android:layout_height="wrap_content"
  android:hint="请输入要搜索的关键词">
  </AutoCompleteTextView>
  public class MainActivity extends Activity{
     private AutoCompleteTextView acTextView;
     //举个例子的初始化数据源
     private String[]res={"beijing1","beijing2","beijing3","shanghai1","shanghai2"};
     protected void onCreate(Bundle savedInstanceState){
       super.onCreate(savedInstanceState);
       setContentView(R.id.activity_main);
       //初始化控件,配一个适配器，在class中初始化数据源，将适配器与AutoCompleteTextView绑定
       acTextView=(AutoCompleteTextView)findViewById(R.id.AutoCompleteTextView1);
       ArrayAdapter<String>adapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,res);
       acTextView.setAdapter(adapter);
       }
       
 /*MultiAutoCompleteTextView支持多次输入，分别用分隔符分开（设置分隔符 mtxt.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer()); comma是逗号
 */并且在个值选中时再次输入会自动匹配。android:completionThreshold="X"为设置多少字符的时候自动匹配
 <MultiAutoCompleteTextView
  android:id="@+id/autoCompleteTextView1"
  android:layout_width="match_parent"
  android:layout_height="wrap_content"
  android:hint="请输入收信人邮箱/手机">
  </MultiAutoCompleteTextView>
  
 //在MainActivity.java中
 public class MainActivity extends Activity{
     private MultiAutoCompleteTextView macTextView;
     //举个例子的初始化数据源
     private String[]res={"beijing1","beijing2","beijing3","shanghai1","shanghai2"};
     protected void onCreate(Bundle savedInstanceState){
       super.onCreate(savedInstanceState);
       setContentView(R.id.activity_main);
       //初始化控件,配一个适配器，在class中初始化数据源，将适配器与AutoCompleteTextView绑定
       macTextView=(MultiAutoCompleteTextView)findViewById(R.id.MultiAutoCompleteTextView1);
       ArrayAdapter<String>adapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,res);
       macTextView.setAdapter(adapter);
       macTextView.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());}
       }
       
//ToggleButton 属性有：android:checked="true"(or false),android:textOff="关"，android:textOn="开"，开关的按键
//在activity_main.xml中
  <ToggleButton
     android:checked="false"
     android:textOn="开"
     android:textOff="关"
     android:id="@+id/toggleButton1"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
     />
     <ImageView
       android:id="@+id/imageView1"
       android:layout_width="match_parent"
       android:layout_height="match_parent"
       android:background="@drawable/off"
       />
       //在MainActivity.java中
       public class MainActivity extends Activity implements OnCheckedChangeListener {
         private ToggleButton tb;
         private ImageView img;
         protected void onCreate(Bundle savedInstanceState){
           super.onCreate(savedInstanceState);
           setContentView(R.layout.activity_main);
           tb=(ToggleButton)findViewById(R.id.toggleButton1);
           img=(ImageView)findViewById(R.id.imageView1);
           tb.setOnCheckedChangeListener(this);
           }
      public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
         img.setBackgroundResource(isChecked?R.drawable.on:R.drawable.off);}}
  //复选框 属性：android:id="@+id/checkbox", android:layout_width="wrap_content",android:layout_height="wrap_content",android:checked="false"(or true),android:text="男"。用于打钩项。
  //在acitivity_main.xml中
  <CheckBox
  //打钩与否 true false
     android:checked="false/true"
     android:id="@+id/checkBox1"
     android:layout_width="wrap_content"
     android:layout_height="wrap_content"
     android:text="男"/>
     
<CheckBox
  //打钩与否 true false
     android:checked="false/true"
     android:id="@+id/checkBox1"
     android:layout_width="wrap_content"
     android:layout_height="wrap_content"
     android:text="女"/>
     
     //在MainActivity.java中
     public class MainActivity extends Activity{
        protected void onCreate(Bundle savedInstanceState){
          super.onCreate(savedInstanceState);
          setContentView(R.layout.activity_main);
          //初始化CheckBox
          checkBox=(CheckBox)findViewById(R.id.checkBox1);
          //设置监听事件
          checkBox.setOnCheckedChangeListener(new OnCheckedChangeListener(){
          public void onCheckedChanged(CompoundButton buttonView,boolean isChecked)
            if(isChecked){
            String text=checkBox.getText().toString();}
            );}}
   //RadioGroup & RadioButton 只能选择一个选项，并且第二次点击不能取消掉第一次的选择，就像性别选择男就不是女
   //属性：android:orientation="vertical"(垂直分布)，android:orientation="horizontal"(水平分布)
   //在activity_main.xml中
   <RadioGroup
      android:orientation="horizontal"
      android:id="@+id/radioGroup1"
      android:layout_width="wrap_content"
      android:layour_height="wrap_content">
      <RadioButton
        android:id="@+id/radio0"
        android:layout_width="wrap_contnet"
        android:layout_height="wrap_content"
        android:checked="true"
        android:text="男"/>
      <RadioButton
         android:id="@+id/radio1"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:text="女"/>
   </RadioGroup>
   
//在MainActivity中导入包 android.widget.RadioGroup
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;

public class MainActivity extends Activity implements OnCheckedChangeListener{
  private RadioGroup rg;
  protected void onCreate(savedInstancestate){
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    rg=(RadioGroup)findViewById(R.id.radioGroup1);
    rg.setOnCheckedChangeListener(this);}
    public void onCheckedChanged(RadioGroup group,int checkedId){
      switch(CheckedId){
        case R.id.radio0:
           .........;break;
       case R.id.radio1:
         ..........;break;}
        
        
/*AlertDialog常用方法
*要创建一个AlertDialog,就要用到AlertDialog.Builder中的create()方法
*setTitle 为对话框设置标题
*setIcon 为对话框设置图标
*setMessage 为对话框设置内容
*setView 为对话框设置自定义样式
*setItems 设置对话框的一个list，一般用于显示几个命令
*setMultiChoiceItems 用来设置对话框显示一系列复选框
*setSingleChoiceItems 设置单选框
*setNeutralButton 普通按钮
*setPositiveButton 添加确认按钮
*setNegativeButton 添加取消按钮

//确认对话框 
/*在activity_main.xml中先定义
*/再在Activity敲代码
<Button
   android:layout_width="fill_parent"
   android:layout_height="wrap_content"
   android:layout_marginTop="10dip"
   android:id="@+id/dialog_btn1"
   android:text="确认对话框"
   />
public class MainActivity extends Activity{
  protected void onCreate(Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    initEvent();
    }
    private void initEvent(){
      findViewById(R.id.dialog_btn1).setOnClickListener(new OnClickListener(){
        public void onClick(View v){
        showDialog1();
        }};}
        private void showDialog1(){
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setTitle("确认对话框");
        builder.setIcon(R.drawable.ic_launcher);
        builder.setMessage("确认对话框提示的内容");
        builder.setPositiveButton("确认",new DialogInterface.OnClickListener(){
           public void onClick(DialogInterface dialog,int which){
             ...........}
             });
          builder.setPositiveButton("取消",new DialogInterface.OnClickListener(){
           public void onClick(DialogInterface dialog,int which){
             ...........}
             });    
         AlertDialog dialog=builder.create();
         dialog.show();}}
        
     //单选对话框
     <Button
       android:layout_width="fill_parent"
       android:layout_height="wrap_content"
       android:layout_marginTop="10dip"
       android:id="@+id/dialog_btn2"
       android:text="单选对话框"/>

public class MainActivity extends Activity{
//添加数组
  String[]single_list={"男","女","女博士","程序员"};
  protected void onCreate(Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    initEvent();
    }
    private void initEvent(){
      findViewById(R.id.dialog_btn1).setOnClickListener(new OnClickListener(){
        public void onClick(View v){
        showDialog2();
        }};}
        private void showDialog2(){
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setTitle("选择性别");
        builder.setIcon(R.drawable.ic_launcher);
        builder.setSingleChoiceItems(single_list,0,new DialogInterface.OnClickListener(){
           public void onClick(DialogInterface dialog,int which){
             ...........}
             });
            
         AlertDialog dialog=builder.create();
         dialog.show();}}
//多选对话框
 <Button
       android:layout_width="fill_parent"
       android:layout_height="wrap_content"
       android:layout_marginTop="10dip"
       android:id="@+id/dialog_btn3"
       android:text="多选对话框"/>

public class MainActivity extends Activity{
//添加数组
  String[]multi_list={"篮球","足球","高尔夫","乒乓"};
  protected void onCreate(Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    initEvent();
    }
    private void initEvent(){
      findViewById(R.id.dialog_btn1).setOnClickListener(new OnClickListener(){
        public void onClick(View v){
        showDialog2();
        }};}
        private void showDialog3(){
        AlertDialog.Builder builder=new AlertDialog.Builder(this);
        builder.setTitle("爱好");
        builder.setIcon(R.drawable.ic_launcher);
        builder.setMultiChoiceItems(multi_list,null,new DialogInterface.OnClickListener(){
           public void onClick(DialogInterface dialog,int which,boolean isChecked){
             if(isChecked){
             ......}else{
             ...........}}
             });
             builder.setNegativeButton("取消"，new DialogInterface.OnClickListener(){
      dialog.dismiss();
      }});
      }
             
            
         AlertDialog dialog=builder.create();
         dialog.show();}}

//菜单有三种类型，optionsMenu选项菜单，context上下文菜单，subMenu子菜单

/* 创建选项菜单：onCreateOptionsMenu() 设置菜单项可设置menuadd(),还可以通过xml设置MenuInflater.inflater();
*/设置菜单项点击事件：onOptionsItemSelected()
//在MainActivity.java中
protected void onCreate(Bundle savedInstanceState){
   super.onCreate(savedInstanceState);
   setContentView(R.layout.activity_main);}
public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.main,menu);
  return true;}
  }
//在res/menu下的menu.xml
<item
   android:id="@+id/action_menu_item1"
   android:orderInCategory="100"
   android:showAsAction="never"
   android:title="菜单1"/>
<item
   android:id="@+id/action_menu_item2"
   android:orderInCategory="100"
   android:showAsAction="never"
   android:title="菜单2"/>

/*动态添加子菜单*/
//在MainActivity.java中 方式一：直接改代码
protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);}
public boolean onCreateOptionsMenu(Menu menu){
  SubMenu file=menu.addSubMenu("文件");
  SubMenu edit=menu.addSubMenu("编辑");
  file.setHeaderTitle("文件操作");
  file.setHeaderIcon(R.drawable.ic_launcher);
  file.add(1,1,1,"新建");
  file.add(1,2,1,"打开");
  file.add(1,3,1,"保存");
  edit.setHeaderTitle("编辑操作");
  edit.setHeaderIcon(R.drawable.ic_launcher);
  edit.add(2,1,1,"复制");
  edit.add(2,2,1,"粘贴");
  edit.add(2,3,1,"剪切");
  return true;}
public boolean onOptionsItemSelected(MenuItem item){
   if(item.getGroupId()==1){...//对菜单一的第一项点击后...}
    else if(item.getGroupId()==2){.....//对菜单一的第二项点击后....}
    else if..
    else if..
    else..
    return true;}
    //在manifest中
   <activity
      android:name="com.bao.MainActivity"
      android:label="@string/app_name"
      android:theme="@android:style/Theme.Light.NoTitleBar">
   //方式二：使用xml添加submenu子菜单 在res/menu下有个main.xml
   <menu............>
     <item 
        android:showAsAction="never"
        android:title="文件">
        <menu>
         <item
           android:id="@+id/new_file"
           android:showAsAction="never"
           android:title="新建"/>
         <item
           android:id="@+id/save_file"
           android:showAsAction="never"
           android:title="保存"/>
      
           android:id="@+id/open_file"
           android:showAsAction="never"
           android:title="打开"/>
         </menu>
         </item>
          <item 
        android:showAsAction="never"
        android:title="编辑">
        <menu>
         <item
           android:id="@+id/c_edit"
           android:showAsAction="never"
           android:title="复制"/>
         <item
           android:id="@+id/v_edit"
           android:showAsAction="never"
           android:title="粘贴"/>
      
           android:id="@+id/x_edit"
           android:showAsAction="never"
           android:title="剪切"/>
         </menu>
         </item>
</menu>
       //在MainActivity中
   public boolean onCreateOptionsMenu(Menu menu){
      MenuInflater inflater=getMenuInflater();
      inflater.inflate(R.menu.main,menu);}
   public boolean onOptionsItemSelected(MenuItem item){
       switch(item.getItemId()){
         case R.id.new_file:.........;break;
         case R.id.open_file:........;break;
         case R.id.save_file:.....;break;
         .....}}
